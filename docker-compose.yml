# Docker Compose for Voicebot Orchestrator
# Production-ready microservices deployment with health checks and networking

version: '3.8'

services:
  # Redis for caching
  redis:
    image: redis:7-alpine
    container_name: voicebot-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    networks:
      - voicebot-network

  # Orchestrator Core - Central coordination service
  orchestrator-core:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: voicebot-orchestrator-core
    restart: unless-stopped
    ports:
      - "8000:8000"
    environment:
      - ENVIRONMENT=production
      - LOG_LEVEL=INFO
      - ORCHESTRATOR_HOST=0.0.0.0
      - ORCHESTRATOR_PORT=8000
      - ORCHESTRATOR_WORKERS=4
      - REDIS_URL=redis://redis:6379
      - STT_SERVICE_URL=http://stt-service:8001
      - LLM_SERVICE_URL=http://llm-service:8002
      - TTS_SERVICE_URL=http://tts-service:8003
      - CACHE_SERVICE_URL=http://cache-service:8004
      - ANALYTICS_SERVICE_URL=http://analytics-service:8005
    volumes:
      - ./logs:/app/logs
      - ./cache:/app/cache
      - ./adapters:/app/adapters
      - ./exports:/app/exports
    depends_on:
      redis:
        condition: service_healthy
      stt-service:
        condition: service_healthy
      llm-service:
        condition: service_healthy
      tts-service:
        condition: service_healthy
      cache-service:
        condition: service_healthy
      analytics-service:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    networks:
      - voicebot-network

  # STT Service - Speech-to-Text
  stt-service:
    build:
      context: .
      dockerfile: Dockerfile.stt
    container_name: voicebot-stt-service
    restart: unless-stopped
    ports:
      - "8001:8001"
    environment:
      - ENVIRONMENT=production
      - LOG_LEVEL=INFO
      - STT_SERVICE_HOST=0.0.0.0
      - STT_SERVICE_PORT=8001
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s
    networks:
      - voicebot-network

  # LLM Service - Language Model
  llm-service:
    build:
      context: .
      dockerfile: Dockerfile.llm
    container_name: voicebot-llm-service
    restart: unless-stopped
    ports:
      - "8002:8002"
    environment:
      - ENVIRONMENT=production
      - LOG_LEVEL=INFO
      - LLM_SERVICE_HOST=0.0.0.0
      - LLM_SERVICE_PORT=8002
    volumes:
      - ./cache:/app/cache
      - ./adapters:/app/adapters
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8002/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    networks:
      - voicebot-network

  # TTS Service - Text-to-Speech
  tts-service:
    build:
      context: .
      dockerfile: Dockerfile.tts
    container_name: voicebot-tts-service
    restart: unless-stopped
    ports:
      - "8003:8003"
    environment:
      - ENVIRONMENT=production
      - LOG_LEVEL=INFO
      - TTS_SERVICE_HOST=0.0.0.0
      - TTS_SERVICE_PORT=8003
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8003/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s
    networks:
      - voicebot-network

  # Cache Service - Semantic Cache Management
  cache-service:
    build:
      context: .
      dockerfile: Dockerfile.cache
    container_name: voicebot-cache-service
    restart: unless-stopped
    ports:
      - "8004:8004"
    environment:
      - ENVIRONMENT=production
      - LOG_LEVEL=INFO
      - CACHE_SERVICE_HOST=0.0.0.0
      - CACHE_SERVICE_PORT=8004
      - REDIS_URL=redis://redis:6379
    volumes:
      - ./cache:/app/cache_service_data
    depends_on:
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8004/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s
    networks:
      - voicebot-network

  # Analytics Service - Metrics and Reporting
  analytics-service:
    build:
      context: .
      dockerfile: Dockerfile.analytics
    container_name: voicebot-analytics-service
    restart: unless-stopped
    ports:
      - "8005:8005"
      - "9090:9090"  # Prometheus metrics
    environment:
      - ENVIRONMENT=production
      - LOG_LEVEL=INFO
      - ANALYTICS_SERVICE_HOST=0.0.0.0
      - ANALYTICS_SERVICE_PORT=8005
    volumes:
      - ./analytics:/app/analytics_data
      - ./exports:/app/exports
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8005/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s
    networks:
      - voicebot-network

  # Prometheus for monitoring (optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: voicebot-prometheus
    restart: unless-stopped
    ports:
      - "9091:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - voicebot-network
    profiles:
      - monitoring

  # Grafana for visualization (optional)
  grafana:
    image: grafana/grafana:latest
    container_name: voicebot-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    networks:
      - voicebot-network
    profiles:
      - monitoring

  # NGINX Load Balancer (optional)
  nginx:
    image: nginx:alpine
    container_name: voicebot-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/certs:/etc/nginx/certs
    depends_on:
      - orchestrator-core
    networks:
      - voicebot-network
    profiles:
      - loadbalancer

volumes:
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  voicebot-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# Additional Docker Compose profiles:
# - Base services: docker-compose up
# - With monitoring: docker-compose --profile monitoring up
# - With load balancer: docker-compose --profile loadbalancer up
# - Full stack: docker-compose --profile monitoring --profile loadbalancer up
